<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Week 18 | Academic</title>
    <link>https://example.com/category/week-18/</link>
      <atom:link href="https://example.com/category/week-18/index.xml" rel="self" type="application/rss+xml" />
    <description>Week 18</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sat, 07 May 2022 18:30:00 +0000</lastBuildDate>
    <image>
      <url>https://example.com/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Week 18</title>
      <link>https://example.com/category/week-18/</link>
    </image>
    
    <item>
      <title>Version control and Git</title>
      <link>https://example.com/en/post/git/</link>
      <pubDate>Sat, 07 May 2022 18:30:00 +0000</pubDate>
      <guid>https://example.com/en/post/git/</guid>
      <description>&lt;p&gt;Modification Control Systems (VCS) allow you to track changes in your code, look through history to look for specific changes, and coordinate work on the same code base between multiple developers.
Today we will look at how one of the most popular VCS, Git, works.&lt;/p&gt;
&lt;h1 id=&#34;story&#34;&gt;Story&lt;/h1&gt;
&lt;p&gt;Git was developed in 2005 by Linus Torvalds to help develop the Linux kernel. Shortly before this, there was a scandal with Bitkeeper, a proprietary version control system that was used by many developers, but was no longer available for free after the copyright holder found out that it was reverse-engineered to create SourcePuller.&lt;/p&gt;
&lt;p&gt;The goals of the project were: to make a distributed VCS that could support a procedure similar to Bitkeeper, but was also fast (no more than three seconds to apply a patch) and had strong protection against errors and unintentional modifications.&lt;/p&gt;
&lt;h1 id=&#34;principles&#34;&gt;Principles&lt;/h1&gt;
&lt;p&gt;Git&amp;rsquo;s primitive data structures do not necessarily implement VCS. There are two places where information is stored &amp;ndash; a dynamic &lt;em&gt;index&lt;/em&gt; that describes the state of the working tree, and an immutable &lt;em&gt;object database&lt;/em&gt;. The latter stores the following five types of objects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BLOB &amp;ndash; the content of the file, denoted by its hash. Each BLOB is a separate version of a file.&lt;/li&gt;
&lt;li&gt;a tree is analogous to a directory, which has links to sub-trees and BLOBs to represent one version of the working tree.&lt;/li&gt;
&lt;li&gt;A commit is a history element pointing to the tree it describes and one or more previous commits.&lt;/li&gt;
&lt;li&gt;tag - an object that has a link to some other object and some additional information about this object. Most commonly used to add digital signatures to commits.&lt;/li&gt;
&lt;li&gt;packfile &amp;ndash; a file containing several other objects in a compressed format for compactness.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because of this design, each repository contains the entire history and can be viewed locally. This is what makes Git &lt;em&gt;distributed&lt;/em&gt; VCS.&lt;/p&gt;
&lt;p&gt;The commit history is structured as a singly-linked tree, and because the identifiers are based on a cryptographic hash of the content, this can also be thought of as a blockchain instance. Each commit can have a parent, the commit that the changes are based on. With the help of them you can go back to the history of changes. Since each commit is identified by its hash, any change in history requires the hash of each object to be recalculated further, which provides cryptographic protection against changes.&lt;/p&gt;
&lt;p&gt;In addition to this, Git maintains a linkbase. Head objects point to the latest commit on a branch, they call the branch, and are in fact branches. One special head, called HEAD, points to the current branch from which the comparison to the working tree is being made. There are also tags, which, like head, indicate commits, but unlike them do not move, and can instead be used to mark important points in the project&amp;rsquo;s history.&lt;/p&gt;
&lt;h1 id=&#34;history-keeping-process&#34;&gt;History keeping process&lt;/h1&gt;
&lt;p&gt;Git does not dictate how a project&amp;rsquo;s history should be maintained. One option that is supposed to be used in the OS course involves short-lived branches within which work is done to implement a new feature, and then this branch is merged into the main tree when the feature is completed. Other options include long-lived branches ranked by code stability, or branches assigned to specific team members.&lt;/p&gt;
&lt;p&gt;Different methods have their pros and cons, which are more or less obvious depending on the type of project and the development methodology that the team uses.&lt;/p&gt;
&lt;h1 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h1&gt;
&lt;p&gt;Git is one of the most popular VCS, and for good reason. It was written to solve problems with existing SLEs, and it was able to solve them much more effectively than any other solution at the time.&lt;/p&gt;
&lt;p&gt;One of the factors behind its popularity has been the rise of Git hosting services such as GitHub, GitLab, and BitBucket. These services allow you to publish a Git repository and make it available from the web, and their convenience has led many users to now associate Git with GitHub.&lt;/p&gt;
&lt;p&gt;With such popularity, ease of casual use, and yet depth of functionality for advanced use, Git is now a must for any kind of code development. That is why in the OS course we learn the basics of using Git.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Weekly post 18</title>
      <link>https://example.com/en/post/weekly-18/</link>
      <pubDate>Sat, 07 May 2022 18:30:00 +0000</pubDate>
      <guid>https://example.com/en/post/weekly-18/</guid>
      <description>&lt;p&gt;This is a weekly post that is required by the rules for maintaining a personal project. This post was written on May 7, 2022, and covers week 18, 2022.&lt;/p&gt;
&lt;h1 id=&#34;how-was-the-week&#34;&gt;How was the week&lt;/h1&gt;
&lt;p&gt;Overall, week 18 was similar to week 17, and both were more productive than week 16.
This is because the format of this course is still unfamiliar and goes against my previous experience.
Therefore, according to the sensations, it turned out only to do the work at the rate of the OS and nothing more useful.&lt;/p&gt;
&lt;h1 id=&#34;key-insights&#34;&gt;Key insights&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;The AVR architecture has three system timers. The first one is usually used for real time tracking, the second one for precise PWM signals, and the third one for approximate PWM signals.&lt;/li&gt;
&lt;li&gt;As before, the model of reality based on the theory of complete determinism with the addition of randomness through quantum mechanics seems to be the most accurate description of reality.&lt;/li&gt;
&lt;li&gt;The video game The Stanley Parable: Ultra Deluxe (2022) puts forward a model of reality based on the central thesis that everything (with the possible exception of the narrator and the player character) is a bucket, and therefore any attempt to limit the number of buckets in the world inevitably leads to the destruction of the world in the current understanding. This model must be carefully considered by the engineers of metaphysics to determine its scope.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;main-insight&#34;&gt;Main insight&lt;/h1&gt;
&lt;p&gt;With the understanding that all timing in the AVR is done with three timers, it is now possible to write code that connects one of the timers to the pins on the chip, allowing you to implement PWM signals from scratch as part of the Rust Arduino environment project.&lt;/p&gt;
&lt;h1 id=&#34;what-failed-to-do&#34;&gt;What failed to do&lt;/h1&gt;
&lt;p&gt;As in weeks 16 and 17, there is a feeling that almost nothing can be done from the plans. This feeling is based on the fact that the work on the OS course takes a very long time and requires full concentration (due to the fact that the video is being recorded), and after completing one stage, it is difficult to convince yourself to do the next. It basically boils down to the fact that I have not yet developed a stable strategy for allocating work and rest time, which, combined with the drastic change in the load profile, leads to this feeling of lack of progress.&lt;/p&gt;
&lt;h1 id=&#34;work-on-mistakes&#34;&gt;Work on mistakes&lt;/h1&gt;
&lt;p&gt;In order to solve the above problems, the most promising solution is to develop task allocation schemes that are comfortable enough for everyday use and that allow active tasks to be solved more efficiently.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Еженедельный пост на неделю 18</title>
      <link>https://example.com/ru/post/weekly-18/</link>
      <pubDate>Sat, 07 May 2022 18:30:00 +0000</pubDate>
      <guid>https://example.com/ru/post/weekly-18/</guid>
      <description>&lt;p&gt;Это еженедельный пост, который требуется по правилам ведения персонального проекта. Этот пост написан 7 мая 2022 года, и покрывает 18 неделю 2022 года.&lt;/p&gt;
&lt;h1 id=&#34;как-прошла-неделя&#34;&gt;Как прошла неделя&lt;/h1&gt;
&lt;p&gt;В целом неделя 18 была похожа на неделю 17, и обе из них были более продуктивны, чем неделя 16.
Это потому, что формат работы по этому курсу до сих пор непривычен, и идет в разрез с моим предыдущим опытом.
Поэтому, по ощущениям, получилось только сделать работу по курсу ОС и ничего более полезного.&lt;/p&gt;
&lt;h1 id=&#34;основные-инсайты&#34;&gt;Основные инсайты&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;В AVR-архитектуре присутствуют три системных таймера. Первый обычно используется для отслеживания реального времени, второй &amp;ndash; для точных ШИМ-сигналов, а третий &amp;ndash; для приблизительных ШИМ-сигналов.&lt;/li&gt;
&lt;li&gt;Как и раньше, модель действительности, основанная на теории полного детерминизма с добавлением случайности через квантовую механику, кажется наиболее точно описывающей действительность.&lt;/li&gt;
&lt;li&gt;Видеоигра The Stanley Parable: Ultra Deluxe (2022) выдвигает модель действительности, основанную на центральном тезисе, что всё (за возможным исключением рассказчика и персонажа игрока) является ведром, и поэтому любые попытки ограничить количество ведер в мире неизбежно приводят к уничтожению мира в текущем понимании. Эта модель должна быть тщательно рассмотрена инженерами метафизики, чтобы определить её область применения.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;главный-инсайт&#34;&gt;Главный инсайт&lt;/h1&gt;
&lt;p&gt;Благодаря пониманию, что вся работа с временем в AVR осуществляется с помощью трех таймеров, можно теперь писать код, который связывает один из таймеров с выводами чипа, что позволит реализовать ШИМ-сигналы с нуля в рамках проекта реализации окружения Arduino на Rust.&lt;/p&gt;
&lt;h1 id=&#34;что-не-удалось-сделать&#34;&gt;Что не удалось сделать&lt;/h1&gt;
&lt;p&gt;Как на неделях 16 и 17, есть ощущение, будто почти ничего не получается делать из планов. Это ощущение основанно на том, что работа по курсу ОС занимает очень долгое время и требует полной концентрации (из-за того, что происходит видеозапись), а после выполнения одного этапа трудно убедить себя делать следующий. В целом это сводится к тому, что я пока что не выработал стабильную стратегию аллокации времени работы и отдыха, что в сочитании с резким изменением профиля нагрузки приводит к этому ощущению отсутствия прогресса.&lt;/p&gt;
&lt;h1 id=&#34;работа-над-ошибками&#34;&gt;Работа над ошибками&lt;/h1&gt;
&lt;p&gt;Для того, чтобы решить вышеупомянутые проблемы, самое перспективное решение &amp;ndash; это разрабатывать схемы распределения задач, которые были бы достаточно удобными для повседневного использования и которые позволили бы с большей эффективностью решать активные задачи.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Управление версиями. Git</title>
      <link>https://example.com/ru/post/git/</link>
      <pubDate>Sat, 07 May 2022 18:30:00 +0000</pubDate>
      <guid>https://example.com/ru/post/git/</guid>
      <description>&lt;p&gt;Системы контроля модификаций (СКВ) позволяют отслеживать изменения в коде, просматривать историю для поиска определенных изменений, а также координировать работу над одной и той же базой кода между несколькими разработчиками.
Сегодня мы рассмотрим, как устроена одна из самых популярных СКВ &amp;ndash; Git.&lt;/p&gt;
&lt;h1 id=&#34;история&#34;&gt;История&lt;/h1&gt;
&lt;p&gt;Git был разработан в 2005 году Линусом Торвальдсом для помощи в разрботке ядра Linux. Незадолго до этого произошел скандал с Bitkeeper &amp;ndash; проприетарной системой контроля версий, которая использовалась многими разработчиками, но перестала быть бесплатно доступна после того, как правообладатель узнал, что она была обратно-разработана, чтобы создать SourcePuller.&lt;/p&gt;
&lt;p&gt;Целями проекта были: сделать распределенную СКВ, которая могла бы поддерживать процедуру, похожую на Bitkeeper, но также была быстрой (не более трех секунд на применение патча) и имела сильную защиту от ошибок и непреднамеренных модификаций.&lt;/p&gt;
&lt;h1 id=&#34;принципы&#34;&gt;Принципы&lt;/h1&gt;
&lt;p&gt;Примитивные структуры данных Git не обязательно реализуют СКВ. Существуют два места, где хранится информация &amp;ndash; динамический &lt;em&gt;индекс&lt;/em&gt;, который описывает состояние рабочего дерева, и неизменяемая &lt;em&gt;база данных объектов&lt;/em&gt;. В последней хранятся следующие пять типов объектов:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BLOB &amp;ndash; содержимое файла, обозначаемое своим хешем. Каждый BLOB &amp;ndash; это отдельная версия файла.&lt;/li&gt;
&lt;li&gt;дерево &amp;ndash; это аналог директории, которая имеет ссылки на под-деревья и BLOB, чтобы представить одну версию рабочего дерева.&lt;/li&gt;
&lt;li&gt;коммит &amp;ndash; это элемент истории, указывающий на дерево, описываемое им, и на один или больше предыдущих коммитов.&lt;/li&gt;
&lt;li&gt;тэг &amp;ndash; объект, который имеет ссылку на какой-то другой объект и какую-то дополнительную информацию об этом объекте. Чаще всего используется для добавления цифровых подписей к коммитам.&lt;/li&gt;
&lt;li&gt;packfile &amp;ndash; файл, содержащий несколько других объектов в сжатом формате для компактности.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Из-за этого дизайна каждый репозиторий содержит всю историю и может быть просмотрен локально. Это то, что делает Git &lt;em&gt;распределенной&lt;/em&gt; СКВ.&lt;/p&gt;
&lt;p&gt;История коммитов устроена как односвязное дерево, и из-за того, что идентификаторы основаны на криптографическом хеше содержимого, это также можно воспринимать как экземпляр блокчейна. Каждый коммит может иметь родителя &amp;ndash; коммит, на основании которого сделаны изменения. С помощью них можно идти назад в историю изменений. Поскольку каждый коммит идентифицируется своим хешем, то любое изменение истории требует пересчета хеша каждого из объектов дальше, что предоставляет криптографическую защиту от изменений.&lt;/p&gt;
&lt;p&gt;В дополнение к этому Git хранит базу ссылок. Head-объекты указывают на последний коммит в ветке, называют ветку, и тем самым фактически являются ветками. Один особый head, называемый HEAD, указывает на текущую ветку, от который идет сравнение с рабочим деревом. Также существуют tags, которые, как и head, указывают на коммиты, но в отличие от них не двигаются, и вместо этого могут быть использованы для обозначения важных точек в истории проекта.&lt;/p&gt;
&lt;h1 id=&#34;процесс-ведения-истории&#34;&gt;Процесс ведения истории&lt;/h1&gt;
&lt;p&gt;Git не регламентирует, как именно следует вести историю проекта. Один из вариантов, который предполагается к использованию в курсе ОС, предполагает короткоживущие ветки, внутри которых производится работа по реализации новой фичи, и затем эта ветка сливается в основное дерево, когда фича завершена. Другие варианты включают долгоживущие ветки, ранжированные по стабильности кода, или ветки, закрепленные за определенными членами команды.&lt;/p&gt;
&lt;p&gt;Разные методы имеют свои плюсы и минусы, которые более или менее явно проявляются в зависимости от типа проекта и методологии разработки, которую использует команда.&lt;/p&gt;
&lt;h1 id=&#34;выводы&#34;&gt;Выводы&lt;/h1&gt;
&lt;p&gt;Git &amp;ndash; это одна из самых популярных СКВ, и это не случайно. Она была написана для того, чтобы разрешить проблемы с существовавшими СКВ, и она смогла решить их гораздо более эффективно, чем любые другие решения в то время.&lt;/p&gt;
&lt;p&gt;Одним из факторов ее популярности стало развитие сервисов хостинга Git, таких как GitHub, GitLab и BitBucket. Эти сервисы позволяют опубликовать Git-репозиторий и сделать его доступным из интернета, и их удобство привело к тому, что сейчас многие пользователи неразрывно ассоциируют Git с GitHub.&lt;/p&gt;
&lt;p&gt;Благодаря такой популярности, простоте казуального использования и при этом глубине функционала для продвинутого использования, Git теперь является необходимостью для любого рода разработки кода. Именно поэтому на курсе ОС мы изучаем основы использования Git.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
